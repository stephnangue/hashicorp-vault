---
- name: Download Vault and build the inventory
  hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - name: Donwload and unzip vault
      unarchive:
        src: https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip
        dest: /tmp
        remote_src: yes

    - name: Get ec2 instances info
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:stack": "{{ stack_name }}"
          instance-state-name: [ "running" ]
      register: ec2_list

    - name: Add instances to inventory
      add_host:
        name: "{{ item.tags.node_name }}.{{ domain_name }}"
        ansible_user: ec2-user
        ansible_host: "{{ item.private_ip_address }}"
        host_key_checking: false
        groups: "aws,{{ item.tags.type }},{{ item.tags.app }},{{ item.tags.node_name }}"
      no_log: true
      when: ec2_list.instances|length > 0
      loop: "{{ ec2_list['instances'] | flatten(levels=1) }}"

- name: Install Vault Proxy
  become: yes
  hosts: vaultproxy

  tasks:
    - name: Stop all services
      systemd:
        state: stopped
        name: "{{ item.service }}"
      with_items:
        - {service: vault-proxy}
        - {service: telegraf}
      register: result_systemd_stop
      failed_when: "result_systemd_stop is failed and 'Could not find the requested service' not in result_systemd_stop.msg"

    - name: Configure the firewall 
      ansible.builtin.shell: | 
        firewall-cmd --permanent --add-port={443/tcp,8125/udp}
        firewall-cmd --permanent --add-service={http,https}
        firewall-cmd --reload
        firewall-cmd --runtime-to-permanent
      register: firewall
      failed_when: firewall.rc != 0 and firewall.rc != 1
      changed_when: firewall.rc == 0

    - name: Create vault user
      user: 
        name: "{{ item.user_name }}"
      with_items:
        - {user_name: "{{ vault_user }}"}

    - name: Create vault group
      group: 
        name: "{{ item.group_name }}"
      with_items:
        - {group_name: "{{ vault_user }}"}

    - name: Create directories for vault
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ vault_user }}"
        group: "{{ vault_user }}"
      with_items:
        - "{{ vault_bin_dir }}"
        - "{{ vault_conf_dir }}"
        - "{{ vault_certs_dir }}"
        - "{{ vault_data_dir }}"

    - name: Install vault binary
      copy:
        src: /tmp/vault
        dest: "{{ vault_bin_dir }}/vault"
        mode: a+x

    - name: Deploy config files
      template:
        src: "{{ item.src_file }}"
        dest: "{{ item.dest_file }}"
        owner: "{{ item.user }}"
        group: "{{ item.group }}"
        mode: '0644'
      with_items:
        - {src_file: "vault-proxy/proxy.env.j2", dest_file: "{{ vault_conf_dir }}/proxy.env", user: "{{ vault_user }}", group: "{{ vault_user }}"}
        - {src_file: "vault-proxy/proxy.hcl.j2", dest_file: "{{ vault_conf_dir }}/proxy.hcl", user: "{{ vault_user }}", group: "{{ vault_user }}"}
        - {src_file: "vault-proxy/vault-proxy.service.j2", dest_file: "/etc/systemd/system/vault-proxy.service", user: root, group: root}
        - {src_file: "vault-proxy/telegraf.conf.j2", dest_file: "/etc/telegraf/telegraf.conf", user: root, group: root}

    - name: Copy the certificate and the private key
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: yes
      with_items:
        - {src: "{{ keys_dir }}/{{ inventory_hostname }}.key", dest: "{{ vault_certs_dir }}/key.pem"}
        - {src: "{{ certs_dir }}/{{ inventory_hostname }}.crt", dest: "{{ vault_certs_dir }}/cert.pem"}

    - name: Start all services
      systemd:
        state: started
        enabled: yes
        daemon_reload: yes
        name: "{{ item.service }}"
      with_items:
        - {service: vault-proxy}
        - {service: telegraf}

    - name: Wait for vault proxy to be available
      wait_for:
        host: 127.0.0.1
        port: 9000
        timeout: 60
