pipeline {
    agent any
    parameters {
        booleanParam(name: 'CONFIGURE_HAPROXY', defaultValue: true, description: 'Do you want to configure HAProxy?')
        booleanParam(name: 'INSTALL_VAULT', defaultValue: true, description: 'Do you want to Set up Vault cluster ?')
        booleanParam(name: 'CONFIGURE_VAULT', defaultValue: true, description: 'Do you want to configure Vault cluster?')
        booleanParam(name: 'INSTALL_VAULT_PROXY', defaultValue: true, description: 'Do you want to intall Vault proxy?')        
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        ANSIBLE_CONFIG = "Lab-06/vault/ansible.cfg"
        VAULT_UNSEAL_TOKEN = credentials('autounseal-token')
        DEPLOY_ROLE_ID = credentials('deploy-role-id')
        DEPLOY_SECRET_ID = credentials('deploy-secret-id')
    }

    stages {
        stage('Install requirements') {
            steps{
                dir('Lab-06/vault') {
                    sh '''
                      ansible-galaxy install -r requirements/ansible-galaxy.yml
                      python -m ensurepip --upgrade
                      python -m pip install -r requirements/python.txt
                    '''
                }
            }
        }
        stage('Configure Haproxy') {
            when {
                expression {
                    return params.CONFIGURE_HAPROXY
                }
            }
            steps{
                ansiblePlaybook playbook: 'Lab-06/vault/haproxy_configure.yml', colorized: true, credentialsId: 'aws-private-key'
            }
        }
        stage('Install Vault cluster') {
            when {
                expression {
                    return params.INSTALL_VAULT
                }
            }
            steps{
                ansiblePlaybook playbook: 'Lab-06/vault/vault_install.yml', colorized: true, credentialsId: 'aws-private-key', extras: '-e vault_version="1.16.2"'
            }          
        }

        stage('Configure Vault cluster') {
            when {
                expression {
                    return params.CONFIGURE_VAULT
                }
            }
            steps{
                ansiblePlaybook playbook: 'Lab-06/vault/vault_configure.yml', colorized: true, credentialsId: 'aws-private-key'
            }          
        }

        stage('Install Vault proxy') {
            when {
                expression {
                    return params.INSTALL_VAULT_PROXY
                }
            }
            steps{
                ansiblePlaybook playbook: 'Lab-06/vault/vault_proxy_install.yml', colorized: true, credentialsId: 'aws-private-key'
            }          
        }
    }
}