---
- name: Build the inventory
  hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - name: Get ec2 instances info
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:stack": "{{ stack_name }}"
          instance-state-name: [ "running" ]
      register: ec2_list

    - name: Add instances to inventory
      add_host:
        name: "{{ item.tags.app }}.{{ domain_name }}"
        ansible_user: ec2-user
        ansible_host: "{{ item.private_ip_address }}"
        host_key_checking: false
        groups: "aws,{{ item.tags.type }},{{ item.tags.app }},{{ item.tags.node_name }}"
      no_log: true
      when: ec2_list.instances|length > 0
      loop: "{{ ec2_list['instances'] | flatten(levels=1) }}"

- name: Install Zitadel
  become: yes
  hosts: zitadel

  tasks:
    - name: Stop zitadel
      systemd:
        state: stopped
        name: "{{ item.service }}"
      with_items:
        - {service: zitadel}
      register: result_systemd_stop
      failed_when: "result_systemd_stop is failed and 'Could not find the requested service' not in result_systemd_stop.msg"
      
    - name: Deploy config files
      template:
        src: "{{ item.src_file }}"
        dest: "{{ item.dest_file }}"
        owner: "{{ item.user }}"
        group: "{{ item.group }}"
        mode: '0644'
      with_items:
        - {src_file: "zitadel.env.j2", dest_file: "/etc/zitadel.env", user: root, group: root}
        - {src_file: "zitadel.service.j2", dest_file: "/etc/systemd/system/zitadel.service", user: root, group: root}

    - name: Configure the firewall 
      ansible.builtin.shell: | 
        firewall-cmd --permanent --add-port=443/tcp
        firewall-cmd --permanent --add-service={http,https}
        firewall-cmd --reload
        firewall-cmd --runtime-to-permanent
        chown zitadel:zitadel {{ certs_dir }}/{{ inventory_hostname }}.crt
        chown zitadel:zitadel {{ keys_dir }}/{{ inventory_hostname }}.key
        chown -R zitadel:zitadel /opt/zitadel/
      register: firewall
      failed_when: firewall.rc != 0 and firewall.rc != 1
      changed_when: firewall.rc == 0

    - name: Start zitadel
      systemd:
        state: started
        name: "{{ item.service }}"
        daemon_reload: true
      with_items:
        - {service: zitadel}
      register: result_systemd_start
      failed_when: "result_systemd_start is failed and 'Could not find the requested service' not in result_systemd_start.msg"

    - name: Read the content of zitadel-admin-sa.json
      slurp:
        src: /opt/zitadel/zitadel-admin-sa.json
      register: jwt_sa_token

    - name: Send the JWT Service Account token to localhost
      set_fact:
        service_account_token: "{{ jwt_sa_token['content'] | b64decode }}"
      delegate_to: localhost
      delegate_facts: True

- name: Configure Zitadel
  hosts: localhost
  gather_facts: false
  connection: local

  vars:
    terraform_binary: "/usr/bin/terraform"
    terraform_project: "terraform/zitadel/dev"

  tasks:   
    - name: Configure Zitadel with terraform
      terraform:
        binary_path: "{{ terraform_binary }}"
        project_path: "{{ terraform_project }}"
        force_init: true
        init_reconfigure: true
        variables:
          jwt_profile_json: "test"
        backend_config:
          region: "{{ region }}"
          bucket: "{{ vault_bucket }}"
      register: zitadel_apply

- name: Login to configurator approle
  hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - set_fact:
        deploy_role_id: "{{ lookup('env', 'DEPLOY_ROLE_ID') }}"
        deploy_secret_id: "{{ lookup('env', 'DEPLOY_SECRET_ID') }}"

    - name: Login to deploy approle
      uri:
        url: "https://identity.{{ domain_name }}:8200/v1/auth/approle/login"
        method: POST
        return_content: yes
        body_format: json
        body: 
          role_id: "{{ deploy_role_id }}"
          secret_id: "{{ deploy_secret_id }}"
        headers:
          Content-type: "application/json"
      register: login_deploy

    - name: Read the configurator credentials
      uri:
        url: "https://identity.{{ domain_name }}:8200/v1/deploy/data/VAULT/{{ cluster_name }}"
        method: GET
        body_format: json
        headers:
          Content-type: "application/json"
          X-Vault-Token: "{{ login_deploy.json.auth.client_token }}"
      register: configurator_creds

    - name: Login to configurator approle
      uri:
        url: "https://vault.{{ domain_name }}/v1/auth/approle/login"
        method: POST
        return_content: yes
        body_format: json
        body: 
          role_id: "{{ configurator_creds.json.data.data.configurator_role_id }}"
          secret_id: "{{ configurator_creds.json.data.data.configurator_secret_id }}"
        headers:
          Content-type: "application/json"
      register: login_configurator

- name: OIDC auth method configuration
  hosts: localhost
  gather_facts: false
  connection: local

  vars:
    terraform_binary: "/usr/bin/terraform"
    terraform_project: "terraform/vault/dev/"

  environment:
    VAULT_ADDR: "https://vault.{{ domain_name }}"
    VAULT_TOKEN: "{{ login_configurator.json.auth.client_token }}"

  tasks:   
    - name: Mount and configure OIDC auth method
      terraform:
        binary_path: "{{ terraform_binary }}"
        project_path: "{{ terraform_project }}"
        force_init: true
        variables:
          domain_name: "{{ domain_name }}"
          client_id: "{{ zitadel_apply.outputs.vault_client_id.value }}"
          client_secret: "{{ zitadel_apply.outputs.vault_client_secret.value }}"
        backend_config:
          region: "{{ region }}"
          bucket: "{{ vault_bucket }}"
      register: apply