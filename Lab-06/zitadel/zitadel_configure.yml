---
- name: Build the inventory
  hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - name: Get ec2 instances info
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:stack": "{{ stack_name }}"
          instance-state-name: [ "running" ]
      register: ec2_list

    - name: Add instances to inventory
      add_host:
        name: "{{ item.tags.app }}.{{ domain_name }}"
        ansible_user: ec2-user
        ansible_host: "{{ item.private_ip_address }}"
        host_key_checking: false
        groups: "aws,{{ item.tags.type }},{{ item.tags.app }},{{ item.tags.node_name }}"
      no_log: true
      when: ec2_list.instances|length > 0
      loop: "{{ ec2_list['instances'] | flatten(levels=1) }}"

- name: Install Zitadel
  become: yes
  hosts: zitadel

  vars:
    temp_skip: true

  tasks:
    - name: Stop zitadel
      systemd:
        state: stopped
        name: "{{ item.service }}"
      with_items:
        - {service: zitadel}
      register: result_systemd_stop
      failed_when: "result_systemd_stop is failed and 'Could not find the requested service' not in result_systemd_stop.msg"
      when: temp_skip == true
      
    - name: Deploy config files
      template:
        src: "{{ item.src_file }}"
        dest: "{{ item.dest_file }}"
        owner: "{{ item.user }}"
        group: "{{ item.group }}"
        mode: '0644'
      with_items:
        - {src_file: "zitadel.env.j2", dest_file: "/etc/zitadel.env", user: root, group: root}
        - {src_file: "zitadel.service.j2", dest_file: "/etc/systemd/system/zitadel.service", user: root, group: root}
      when: temp_skip == true

    - name: Configure the firewall 
      ansible.builtin.shell: | 
        firewall-cmd --permanent --add-port=443/tcp
        firewall-cmd --permanent --add-service={http,https}
        firewall-cmd --reload
        firewall-cmd --runtime-to-permanent
        chown zitadel:zitadel {{ certs_dir }}/{{ inventory_hostname }}.crt
        chown zitadel:zitadel {{ keys_dir }}/{{ inventory_hostname }}.key
        chown -R zitadel:zitadel /opt/zitadel/
      register: firewall
      failed_when: firewall.rc != 0 and firewall.rc != 1
      changed_when: firewall.rc == 0
      when: temp_skip == true

    - name: Start zitadel
      systemd:
        state: started
        name: "{{ item.service }}"
        daemon_reload: true
      with_items:
        - {service: zitadel}
      register: result_systemd_start
      failed_when: "result_systemd_start is failed and 'Could not find the requested service' not in result_systemd_start.msg"
      when: temp_skip == true

    - name: Wait for zitadel to be available
      wait_for:
        host: 127.0.0.1
        port: 443
        timeout: 120
      when: temp_skip == true

    - name: Read the content of zitadel-admin-sa.json
      slurp:
        src: /opt/zitadel/zitadel-admin-sa.json
      register: jwt_sa_token

    - name: Send the JWT Service Account token to localhost
      set_fact:
        service_account_token: "{{ jwt_sa_token['content'] | b64decode }}"
      delegate_to: localhost
      delegate_facts: True

- name: Configure Zitadel
  hosts: localhost
  gather_facts: false
  connection: local

  vars:
    terraform_binary: "/usr/bin/terraform"
    terraform_project: "terraform/zitadel/dev/"

  tasks: 
    - name: Creating a file with content
      copy:
        dest: "/tmp/token"
        content: '{{ service_account_token }}'

    - name: Configure Zitadel with terraform
      terraform:
        binary_path: "{{ terraform_binary }}"
        project_path: "{{ terraform_project }}"
        force_init: true
        variables:
          jwt_profile_file: "/tmp/token"
        backend_config:
          region: "{{ region }}"
          bucket: "{{ vault_bucket }}"
      register: zitadel_apply