pipeline {
    agent any
    parameters {
        booleanParam(name: 'CONFIGURE_POSTGRES', defaultValue: true, description: 'Do you want to configure Postgresql?')
        booleanParam(name: 'CONFIGURE_ZITADEL', defaultValue: true, description: 'Do you want to configure Zitadel?')        
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        ANSIBLE_CONFIG = "Lab-06/zitadel/ansible.cfg"
        VAULT_UNSEAL_TOKEN = credentials('autounseal-token')
        DEPLOY_ROLE_ID = credentials('deploy-role-id')
        DEPLOY_SECRET_ID = credentials('deploy-secret-id')
    }

    stages {
        stage('Install requirements') {
            steps{
                dir('Lab-06/zitadel') {
                    sh '''
                      ansible-galaxy install -r requirements/ansible-galaxy.yml
                      python -m ensurepip --upgrade
                      python -m pip install -r requirements/python.txt
                    '''
                }
            }
        }
        stage('Configure Postgres') {
            when {
                expression {
                    return params.CONFIGURE_POSTGRES
                }
            }
            steps{
                ansiblePlaybook playbook: 'Lab-06/zitadel/postgres_configure.yml', colorized: true, credentialsId: 'aws-private-key'
            }
        }
        stage('Configure Zitadel') {
            when {
                expression {
                    return params.CONFIGURE_ZITADEL
                }
            }
            steps{
                ansiblePlaybook playbook: 'Lab-06/zitadel/zitadel_configure.yml', colorized: true, credentialsId: 'aws-private-key'
            }          
        }
    }
}