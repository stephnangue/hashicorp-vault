---
- name: Download Vault and build the inventory
  hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - name: Donwload and unzip vault
      unarchive:
        src: https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip
        dest: /tmp
        remote_src: yes

    - name: Get ec2 instances info
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:stack": "{{ stack_name }}"
          instance-state-name: [ "running" ]
      register: ec2_list

    - name: Add instances to inventory
      add_host:
        name: "{{ item.tags.node_name }}.{{ domain_name }}"
        ansible_user: ec2-user
        ansible_host: "{{ item.private_ip_address }}"
        host_key_checking: false
        groups: "aws,{{ item.tags.type }},{{ item.tags.app }},{{ item.tags.node_name }}"
      no_log: true
      when: ec2_list.instances|length > 0
      loop: "{{ ec2_list['instances'] | flatten(levels=1) }}"

- name: Install Vault
  become: yes
  hosts: vault
  serial: 1

  tasks:
    - name: Stop all services
      systemd:
        state: stopped
        name: "{{ item.service }}"
      with_items:
        - {service: vault}
      register: result_systemd_stop
      failed_when: "result_systemd_stop is failed and 'Could not find the requested service' not in result_systemd_stop.msg"

    - name: Configure the firewall 
      ansible.builtin.shell: | 
        firewall-cmd --permanent --add-port={8200/tcp,8201/tcp,443/tcp}
        firewall-cmd --permanent --add-service={http,https}
        firewall-cmd --reload
        firewall-cmd --runtime-to-permanent
      register: firewall
      failed_when: firewall.rc != 0 and firewall.rc != 1
      changed_when: firewall.rc == 0

    - name: Create vault user
      user: 
        name: "{{ item.user_name }}"
      with_items:
        - {user_name: "{{ vault_user }}"}

    - name: Create vault group
      group: 
        name: "{{ item.group_name }}"
      with_items:
        - {group_name: "{{ vault_user }}"}

    - name: Create directories for vault
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ vault_user }}"
        group: "{{ vault_user }}"
      with_items:
        - "{{ vault_bin_dir }}"
        - "{{ vault_conf_dir }}"
        - "{{ vault_certs_dir }}"
        - "{{ vault_data_dir }}"

    - name: Install vault binary
      copy:
        src: /tmp/vault
        dest: "{{ vault_bin_dir }}/vault"
        mode: a+x

    - name: Deploy vault config files
      template:
        src: "{{ item.src_file }}"
        dest: "{{ item.dest_file }}"
        owner: "{{ item.user }}"
        group: "{{ item.group }}"
        mode: '0644'
      with_items:
        - {src_file: "vault-cluster/vault.env.j2", dest_file: "{{ vault_conf_dir }}/vault.env", user: "{{ vault_user }}", group: "{{ vault_user }}"}
        - {src_file: "vault-cluster/vault.hcl.j2", dest_file: "{{ vault_conf_dir }}/vault.hcl", user: "{{ vault_user }}", group: "{{ vault_user }}"}
        - {src_file: "vault-cluster/vault.service.j2", dest_file: "/etc/systemd/system/vault.service", user: root, group: root}

    - name: Add environment variables to ~/.bashrc
      lineinfile:
        dest: "~/.bashrc"
        regexp: "^VAULT_ADDR="
        line: "export VAULT_ADDR=http://127.0.0.1:8200"
      become: false

    - name: Add vault alias
      lineinfile:
        dest: "~/.bashrc"
        line: 'alias vault="{{ vault_bin_dir }}/vault"'
      become: false

    - name: Don't log vault commands in bash history
      lineinfile:
        dest: "/etc/bashrc"
        line: 'export HISTIGNORE="&:vault*"'

    - name: Copy the certificate and the private key
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: yes
      with_items:
        - {src: "{{ keys_dir }}/{{ inventory_hostname }}.key", dest: "{{ vault_certs_dir }}/key.pem"}
        - {src: "{{ certs_dir }}/{{ inventory_hostname }}.crt", dest: "{{ vault_certs_dir }}/cert.pem"}

    - name: Start all services
      systemd:
        state: started
        enabled: yes
        daemon_reload: yes
        name: "{{ item.service }}"
      with_items:
        - {service: vault}

    - name: Wait for vault to be available
      wait_for:
        host: 127.0.0.1
        port: 8200
        timeout: 60

    - name: Init vault
      uri:
        url: http://127.0.0.1:8200/v1/sys/init
        method: POST
        return_content: yes
        body: "{ \"stored_shares\": 3, \"recovery_shares\": 5, \"recovery_threshold\": 3}"
        body_format: json
        status_code: [200,400]
        headers:
          Content-type: "application/json"
      register: init_out

    - name: Send the root token to localhost
      set_fact:
        root_token: "{{ init_out['json']['root_token'] }}"
      delegate_to: localhost
      delegate_facts: True
      when: "'root_token' in init_out.content"
      
    - name: Check that vault is unsealed
      uri:
        url: http://127.0.0.1:8200/v1/sys/seal-status
        method: GET
        status_code: [200]
        headers:
          Content-type: "application/json"
      register: this
      until: this.json.sealed == false
      retries: 10
      delay: 5

    - name: Check that vault is healthy
      uri:
        url: "http://127.0.0.1:8200/v1/sys/health?standbyok=true&perfstandbyok=true&drsecondarycode=200"
        method: GET
        status_code: [200]
        headers:
          Content-type: "application/json"
      register: health_check

    - name: Check that we have a leader
      uri:
        url: http://127.0.0.1:8200/v1/sys/leader
        method: GET
        status_code: 200
        headers:
          Content-type: "application/json"
      register: leader
      retries: 10
      delay: 5
      until: leader.json.leader_address is search('vault')

    - name: Display status
      debug:
        msg: 
          - "The Vault leader_cluster_address is: {{ leader.json.leader_address }}"
          - "The Vault leader Url is: {{ leader.json.leader_address }}"
          - "The installed version of Vault is : {{ health_check.json.version }}"


- name: Create the configurator approle
  hosts: localhost
  gather_facts: no
  connection: local

  vars:
    terraform_binary: "/usr/bin/terraform"
    terraform_project: "/tmp/vault-first-config/dev/"

  environment:
    VAULT_ADDR: "https://vault.{{ domain_name }}"
    VAULT_TOKEN: "{{ root_token | default('empty') }}"

  tasks:
    - set_fact:
        deploy_role_id: "{{ lookup('env', 'DEPLOY_ROLE_ID') }}"
        deploy_secret_id: "{{ lookup('env', 'DEPLOY_SECRET_ID') }}"

    - name: Copy vault terraform config
      copy:
        src: vault-first-config
        dest: /tmp/
      when: root_token is defined

    - name: Create the configurator approle
      terraform:
        binary_path: "{{ terraform_binary }}"
        project_path: "{{ terraform_project }}"
        force_init: true
        backend_config:
          region: "{{ region }}"
          bucket: "{{ vault_bucket }}"
      when: root_token is defined
      register: apply

    - name: Login to deploy approle
      uri:
        url: "https://identity.{{ domain_name }}:8200/v1/auth/approle/login"
        method: POST
        return_content: yes
        body_format: json
        body: 
          role_id: "{{ deploy_role_id }}"
          secret_id: "{{ deploy_secret_id }}"
        headers:
          Content-type: "application/json"
      register: login
      when: root_token is defined

    - name: Publish the configurator approle credentials
      uri:
        url: "https://identity.{{ domain_name }}:8200/v1/deploy/data/VAULT/{{ cluster_name }}"
        method: POST
        return_content: yes
        body_format: json
        body: 
          data: 
            configurator_role_id: "{{ apply.outputs.configurator_role_id.value }}"
            configurator_secret_id: "{{ apply.outputs.configurator_secret_id.value }}"
        headers:
          Content-type: "application/json"
          X-Vault-Token: "{{ login.json.auth.client_token }}"
      when: root_token is defined